{"version":3,"sources":["store/sbermarket/lenta/actions.tsx","store/helpers.ts","store/sbermarket/lenta/reducers.tsx","store/sbermarket/lenta/constants.ts","store/reducers.tsx","components/Page/Page.tsx","pages/sbermarket/lenta/components/SberLentaBreadcrumbs/SberLentaBreadcrumbs.tsx","pages/sbermarket/lenta/components/SberLentaForm/SberLentaForm.tsx","pages/sbermarket/lenta/components/SberLentaTable/SberLentaTable.tsx","pages/sbermarket/lenta/components/SberLentaTableCell/SberLentaTableCell.tsx","pages/sbermarket/lenta/components/SberLentaTableRow/SberLentaTableRow.tsx","pages/sbermarket/lenta/component.tsx","pages/sbermarket/lenta/index.tsx","components/App/App.tsx","serviceWorker.js","index.js"],"names":["actions","payload","type","replaceArrayReduxAction","array","changedIndex","replacedItem","slice","defaultState","isLoading","requiredExportFields","isChecked","name","key","exportFormatVariants","text","needLimitMaxCategories","needLimitMaxProducts","limitMaxCategoriesNumber","limitMaxProductsNumber","needToGetCachedData","productItems","tableHeaderFields","combineReducers","sberLenta","state","action","console","log","reduce","result","field","index","map","variant","cnPage","cn","Page","props","className","children","StyledBreadcrumb","withStyles","theme","root","backgroundColor","palette","grey","height","spacing","color","fontWeight","typography","fontWeightRegular","boxShadow","shadows","emphasize","Chip","SberLentaBreadcrumbs","Breadcrumbs","cnSberLenta","separator","aria-label","label","icon","fontSize","RequiredFieldsFormControl","onChange","changeCheckboxDefaultExportFields","controls","expanded","setExpanded","controlsComponents","SPLITTED_BY","onChangeHandler","controlLabelsTemp","control","FormControlLabel","Checkbox","checked","push","isLastElement","length","splitElements","event","target","FormControl","Accordion","AccordionSummary","expandIcon","aria-controls","id","AccordionDetails","FormGroup","i","ExportFormatsFormControl","formats","changeExportFormatVariants","selectedFormat","find","format","InputLabel","Select","labelId","value","MenuItem","MaxProductsFormControl","toggleMaxProductsRadioButton","setLimitMaxProductsNumber","FormLabel","Switch","TextField","Number","InputLabelProps","shrink","GetFromCacheFormControl","React","memo","toggleCachedDataRadioButton","tooltipText","Tooltip","title","IconButton","size","sendRequest","setLoading","saveProductItems","saveTableHeaderFields","url","window","location","hostname","body","cached","options","exportFormat","fields","maxProducts","getRequestBody","fetch","method","mode","headers","JSON","stringify","then","response","json","success","headerFields","localStorage","setItem","catch","error","StartFormParseButton","Button","disabled","onClick","endIcon","SberLentaForm","useState","noValidate","autoComplete","TableHeadComponent","TableHead","TableRow","StyledTableCell","TableBodyComponent","TableBody","products","rowIndex","SberLentaTable","tableRef","useRef","useEffect","ref","current","offsetTop","scrollTo","top","behavior","scrollToTable","maxTableHeight","document","documentElement","clientHeight","TableContainer","component","Paper","style","maxHeight","Table","stickyHeader","head","common","black","white","TableCell","SberLentaTableCellName","Link","underline","href","SberLentaTableCellDescription","slicedValue","SberLentaTableCellImage","src","SberLentaTableCellBreadCrumbs","joinedValue","join","SberLentaTableCellDefault","SberLentaTableCellPrice","default","original","SberLentaTableCellNutrition","SberLentaTableCellProperties","SberLentaTableCellItem","StyledTableRow","hover","SberLentaTableRow","link","product","linkUrl","tableCellsData","Cell","parseProductCell","Fragment","mapDispatchToProps","toggleMaxCategoriesRadioButton","setLimitMaxCategoriesNumber","SberLentaPage","connect","Typography","paragraph","LinearProgress","store","createStore","rootReducer","applyMiddleware","thunk","App","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8f585e97.chunk.js","sourcesContent":["import {\n    ISberLentaMethods,\n} from './typings';\n\nexport const CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS = 'CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS';\nexport const CHANGE_EXPORT_FORMAT_VARIANTS = 'CHANGE_EXPORT_FORMAT_VARIANTS';\n\nexport const TOGGLE_MAX_CATEGORIES_RADIO_BUTTON = 'TOGGLE_MAX_CATEGORIES_RADIO_BUTTON';\nexport const TOGGLE_MAX_PRODUCTS_RADIO_BUTTON = 'TOGGLE_MAX_PRODUCTS_RADIO_BUTTON';\n\nexport const SET_LIMIT_MAX_CATEGORIES_NUMBER = 'SET_LIMIT_MAX_CATEGORIES_NUMBER';\nexport const SET_LIMIT_MAX_PRODUCTS_NUMBER = 'SET_LIMIT_MAX_PRODUCTS_NUMBER';\n\nexport const SET_LOADING = 'SET_LOADING';\nexport const TOGGLE_CACHED_DATA_RADIO_BUTTON = 'TOGGLE_CACHED_DATA_RADIO_BUTTON';\n\nexport const SAVE_PRODUCT_ITEMS = 'SAVE_PRODUCT_ITEMS';\nexport const SAVE_TABLE_HEADER_FIELDS = 'SAVE_TABLE_HEADER_FIELDS';\n\nconst actions: ISberLentaMethods = {\n    changeCheckboxDefaultExportFields: payload => ({\n        type: CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS,\n        payload,\n    }),\n\n    changeExportFormatVariants: payload => ({\n        type: CHANGE_EXPORT_FORMAT_VARIANTS,\n        payload,\n    }),\n\n    toggleMaxCategoriesRadioButton: () => ({\n        type: TOGGLE_MAX_CATEGORIES_RADIO_BUTTON,\n    }),\n\n    toggleMaxProductsRadioButton: () => ({\n        type: TOGGLE_MAX_PRODUCTS_RADIO_BUTTON,\n    }),\n\n    setLimitMaxCategoriesNumber: payload => ({\n        type: SET_LIMIT_MAX_CATEGORIES_NUMBER,\n        payload,\n    }),\n\n    setLimitMaxProductsNumber: payload => ({\n        type: SET_LIMIT_MAX_PRODUCTS_NUMBER,\n        payload,\n    }),\n\n    setLoading: payload => ({\n        type: SET_LOADING,\n        payload,\n    }),\n\n    toggleCachedDataRadioButton: () => ({\n        type: TOGGLE_CACHED_DATA_RADIO_BUTTON,\n    }),\n\n    saveProductItems: payload => ({\n        type: SAVE_PRODUCT_ITEMS,\n        payload,\n    }),\n\n    saveTableHeaderFields: payload => ({\n        type: SAVE_TABLE_HEADER_FIELDS,\n        payload,\n    }),\n}\n\nexport { actions };\n","/**\n * Заменяет элемент массива на другой, не модифицируя исходный массив\n */\nexport const replaceArrayReduxAction = (array: object[], changedIndex: number = 0, replacedItem?: object) => {\n    return [\n        ...array.slice(0, changedIndex),\n        replacedItem,\n        ...array.slice(changedIndex + 1)\n    ];\n};\n","import { IGlobalReduxAction } from '../../typings';\n\nimport {\n    CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS,\n    CHANGE_EXPORT_FORMAT_VARIANTS,\n\n    TOGGLE_MAX_PRODUCTS_RADIO_BUTTON,\n    TOGGLE_MAX_CATEGORIES_RADIO_BUTTON,\n\n    SET_LIMIT_MAX_CATEGORIES_NUMBER,\n    SET_LIMIT_MAX_PRODUCTS_NUMBER,\n\n    SET_LOADING,\n    TOGGLE_CACHED_DATA_RADIO_BUTTON,\n\n    SAVE_PRODUCT_ITEMS,\n    SAVE_TABLE_HEADER_FIELDS,\n} from './actions';\n\nimport {\n    DEFAULT_EXPORT_FIELDS,\n    DEFAULT_EXPORT_FORMATS,\n} from './constants';\n\nimport {\n    ISberLentaVars,\n} from './typings';\n\nimport {\n    replaceArrayReduxAction,\n} from '../../helpers';\n\nconst defaultState: ISberLentaVars = {\n    isLoading: false,\n    requiredExportFields: DEFAULT_EXPORT_FIELDS,\n    exportFormatVariants: DEFAULT_EXPORT_FORMATS,\n\n    needLimitMaxCategories: false,\n    needLimitMaxProducts: true,\n\n    limitMaxCategoriesNumber: 10,\n    limitMaxProductsNumber: 5,\n\n    needToGetCachedData: true,\n    productItems: null,\n    tableHeaderFields: null,\n};\n\nexport const sberLentaReducer = (state = defaultState, action: IGlobalReduxAction) => {\n    console.log('sberLentaReducer action', action, 'state', state);\n    switch (action.type) {\n        case CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS: {\n            const { changedIndex, replacedItem }: Partial<{ changedIndex: number, replacedItem: object }> = state.requiredExportFields\n                .reduce((result, field, index) => {\n                    if (field.key === action.payload) {\n                        return {\n                            changedIndex: index,\n                            replacedItem: {\n                                ...field,\n                                isChecked: !field.isChecked\n                            }\n                        };\n                    }\n\n                    return result;\n                }, {});\n\n            const requiredExportFields = replaceArrayReduxAction(\n                state.requiredExportFields,\n                changedIndex,\n                replacedItem,\n            );\n\n            return {\n                ...state,\n                requiredExportFields,\n            };\n        }\n\n        case CHANGE_EXPORT_FORMAT_VARIANTS: {\n            const exportFormatVariants = state.exportFormatVariants.map(variant => {\n                variant.isChecked = variant.type === action.payload;\n\n                return variant;\n            });\n\n            return {\n                ...state,\n                exportFormatVariants,\n            };\n        }\n\n        case TOGGLE_MAX_PRODUCTS_RADIO_BUTTON: {\n            return {\n                ...state,\n                needLimitMaxProducts: !state.needLimitMaxProducts,\n            };\n        }\n\n        case TOGGLE_MAX_CATEGORIES_RADIO_BUTTON: {\n            return {\n                ...state,\n                needLimitMaxCategories: !state.needLimitMaxCategories,\n            };\n        }\n\n        case SET_LIMIT_MAX_CATEGORIES_NUMBER: {\n            return {\n                ...state,\n                limitMaxCategoriesNumber: action.payload,\n            };\n        }\n\n        case SET_LIMIT_MAX_PRODUCTS_NUMBER: {\n            return {\n                ...state,\n                limitMaxProductsNumber: action.payload,\n            };\n        }\n\n        case SET_LOADING: {\n            return {\n                ...state,\n                isLoading: action.payload\n            };\n        }\n\n        case TOGGLE_CACHED_DATA_RADIO_BUTTON: {\n            return {\n                ...state,\n                needToGetCachedData: !state.needToGetCachedData\n            };\n        }\n\n        case SAVE_PRODUCT_ITEMS: {\n            return {\n                ...state,\n                productItems: action.payload,\n            };\n        }\n\n        case SAVE_TABLE_HEADER_FIELDS: {\n            return {\n                ...state,\n                tableHeaderFields: action.payload,\n            };\n        }\n\n        default:\n            return state;\n    }\n}\n","import { IProductAvaliableType, IProductAvaliableName } from './typings';\n\nexport interface IDefaultExportField {\n    /**\n     * Выбрано ли поле\n     */\n    isChecked: boolean;\n\n    /**\n     * Название поля, выводится рядом с чекбоксом\n     */\n    name: IProductAvaliableName;\n\n    /**\n     * Уникальный ключ поля\n     */\n    key: IProductAvaliableType;\n}\nexport interface IDefaultExportFormat {\n    /**\n     * Возможный тип\n     */\n    type: 'table' | 'file';\n\n    /**\n     * Текстовое описание типа\n     */\n    text: string;\n\n    /**\n     * Выбрано ли поле\n     */\n    isChecked: boolean;\n}\n\n/**\n * Какие поля хотим возвращать от сервера\n */\nconst DEFAULT_EXPORT_FIELDS: IDefaultExportField[] = [\n    {\n        isChecked: true,\n        name: 'Изображение',\n        key: 'image'\n    },\n    {\n        isChecked: true,\n        name: 'Название',\n        key: 'name',\n    },\n    {\n        isChecked: true,\n        name: 'Категория',\n        key: 'breadcrumbs'\n    },\n    {\n        isChecked: true,\n        name: 'Цена',\n        key: 'price'\n    },\n    {\n        isChecked: true,\n        name: 'Масса',\n        key: 'weight'\n    },\n    {\n        isChecked: true,\n        name: 'Количество',\n        key: 'stock'\n    },\n    {\n        isChecked: false,\n        name: 'БЖУ',\n        key: 'nutrition'\n    },\n    {\n        isChecked: true,\n        name: 'Ссылка',\n        key: 'link',\n    },\n    {\n        isChecked: false,\n        name: 'Описание',\n        key: 'description'\n    },\n    {\n        isChecked: false,\n        name: 'Дополнительно',\n        key: 'properties'\n    }\n];\n\nconst DEFAULT_EXPORT_FORMATS: IDefaultExportFormat[] = [\n    {\n        type: 'table',\n        text: 'В таблице на сайте',\n        isChecked: true,\n    },\n    {\n        type: 'file',\n        text: 'Экспорт в файл',\n        isChecked: false,\n    }\n];\n\nexport {\n    DEFAULT_EXPORT_FIELDS, DEFAULT_EXPORT_FORMATS\n};\n","import { combineReducers } from 'redux';\n\n// import { globalReducer } from './global/reducers';\n// import { searchReducer } from './search/reducers';\nimport { sberLentaReducer } from './sbermarket/lenta';\n\nexport default combineReducers({\n    sberLenta: sberLentaReducer,\n    // global: globalReducer,\n    // search: searchReducer,\n    // alerts: alertsReducer,\n});\n\n","import React from 'react';\nimport { cn } from '@bem-react/classname';\n\nimport './Page.scss';\n\nexport const cnPage = cn('Page');\n\ninterface IPageProps {\n    className?: string;\n    children: any;\n}\n\nconst Page: React.FC<IPageProps> = props => {\n    let className = 'Page';\n\n    if (props.className) {\n        className += ' ' + props.className;\n    }\n\n    return (\n        <div className={className}>{props.children}</div>\n    )\n}\n\nexport { Page };\n","import React from 'react';\n\nimport { emphasize, withStyles } from '@material-ui/core/styles';\n\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Chip from '@material-ui/core/Chip';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport { ISberLentaState } from '../../../../../store/sbermarket/lenta/typings';\n\nimport { cnSberLenta } from '../../component';\n\nimport './SberLentaBreadcrumbs.scss';\n\nconst StyledBreadcrumb = withStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.grey[100],\n        height: theme.spacing(3),\n        color: theme.palette.grey[800],\n        fontWeight: theme.typography.fontWeightRegular,\n        '&:hover, &:focus': {\n            backgroundColor: theme.palette.grey[300],\n        },\n        '&:active': {\n            boxShadow: theme.shadows[1],\n            backgroundColor: emphasize(theme.palette.grey[300], 0.12),\n        },\n    },\n}))(Chip); // TypeScript only: need a type cast here because https://github.com/Microsoft/TypeScript/issues/26591\n\n\nconst SberLentaBreadcrumbs: React.FunctionComponent<ISberLentaState> = props => {\n    return (\n        <Breadcrumbs className={cnSberLenta('Breadcrumbs')} separator=\"›\" aria-label=\"breadcrumb\">\n            <StyledBreadcrumb\n                label='Parsers'\n                icon={<HomeIcon fontSize='small' />}\n            />\n            <StyledBreadcrumb label='SberMarket' />\n            <StyledBreadcrumb\n                label='Lenta'\n            />\n        </Breadcrumbs>\n\n    )\n};\n\nexport { SberLentaBreadcrumbs };\n","import React, { useState } from 'react';\n\nimport {\n    Checkbox,\n    Button,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    MenuItem,\n    Select,\n    FormLabel,\n    FormGroup,\n    TextField,\n    Switch,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n\n    ArrowForwardIosIcon,\n    HelpOutlineIcon,\n    IconButton,\n    Tooltip,\n    ExpandMoreIcon,\n} from './components';\n\nimport { cnSberLenta } from '../../component';\n\nimport { IDefaultExportField } from '../../../../../store/sbermarket/lenta/constants';\nimport { ISberLentaState, IProductAvaliableName } from '../../../../../store/sbermarket/lenta/typings';\n\nimport './SberLentaForm.scss';\n\n/**\n * Делим элементы по SPLITTED_BY\n */\nconst splitElements = (\n    controls: IDefaultExportField[],\n    SPLITTED_BY: number,\n    onChangeHandler: (event: React.ChangeEvent<HTMLInputElement>) => void\n) => {\n    let controlLabelsTemp: JSX.Element[] = [];\n\n    return controls.reduce((result: JSX.Element[][], control, index, array) => {\n        const { name, key, isChecked } = control;\n\n        const label = (\n            <FormControlLabel\n                className={cnSberLenta('FormCheckbox')}\n                key={name}\n                control={<Checkbox checked={isChecked} onChange={onChangeHandler} name={key} />}\n                label={name}\n            />\n        );\n\n        controlLabelsTemp.push(label);\n\n        const isLastElement = array.length - 1 === index;\n\n        if (controlLabelsTemp.length === SPLITTED_BY || isLastElement) {\n            result.push(controlLabelsTemp);\n            controlLabelsTemp = [];\n        }\n\n        return result;\n    }, []);\n};\n\nexport interface IRequiredFieldsFormControlProps extends ISberLentaState {\n    expanded: boolean;\n    setExpanded: React.Dispatch<React.SetStateAction<boolean>>\n}\n\n/**\n * Контролы выбора необходимых полей для экспорта\n */\nexport const RequiredFieldsFormControl: React.FunctionComponent<IRequiredFieldsFormControlProps> = props => {\n    const {\n        changeCheckboxDefaultExportFields: onChange,\n        requiredExportFields: controls,\n        expanded, setExpanded,\n    } = props;\n\n    if (!controls || !onChange) return null;\n\n    const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name } = event.target;\n\n        onChange(name as IProductAvaliableName);\n    };\n\n    /**\n     * Делим компоненты по {SPLITTED_BY} в ряд\n     */\n    const SPLITTED_BY = 5;\n    const controlsComponents = splitElements(controls, SPLITTED_BY, onChangeHandler);\n\n    return (\n        <FormControl className={cnSberLenta('FormAccordion')}>\n            <Accordion expanded={expanded} onChange={() => setExpanded(!expanded)}>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-label='Expand'\n                    aria-controls='additional-actions-content'\n                    id='additional-actions-header'\n                >\n                    Необходимые поля\n                </AccordionSummary>\n                <AccordionDetails>\n                    <FormGroup className={cnSberLenta('FormGroupControlsWrapper')}>\n                        {controlsComponents.map((control, i) => {\n                            return (\n                                <div key={i} className={cnSberLenta('FormGroupControls')}>\n                                    {control}\n                                </div>\n                            )\n                        })}\n                    </FormGroup>\n                </AccordionDetails>\n            </Accordion>\n        </FormControl>\n    );\n};\n\n/**\n * Контролы выбора формата экспорта данных\n */\nexport const ExportFormatsFormControl: React.FunctionComponent<ISberLentaState> = props => {\n    const {\n        exportFormatVariants: formats,\n        changeExportFormatVariants: onChange,\n    } = props;\n\n    if (!formats) return null;\n\n    const selectedFormat = formats.find(format => format.isChecked);\n\n    if (!selectedFormat) return null;\n\n    const handleExportFormat = (event: React.ChangeEvent<any>) => {\n        onChange(event.target.value);\n    }\n\n    return (\n        <FormControl className={cnSberLenta('FormControl')}>\n            <InputLabel id='export-format-control-label'>Формат выходных данных</InputLabel>\n            <Select\n                className={cnSberLenta('ExportFormatSelect') + ' ' + cnSberLenta('FormFixedControl')}\n                labelId='export-format-control-label'\n                id='export-format-control-label'\n                value={selectedFormat.type}\n                onChange={handleExportFormat}\n            >\n                {formats.map(format => {\n                    return (\n                        <MenuItem key={format.type} value={format.type}>{format.text}</MenuItem>\n                    );\n                })}\n            </Select>\n        </FormControl>\n    );\n};\n\n/**\n * Контрол ограничения максимального количества категорий\n */\nexport const MaxCategoriesFormControl: React.FunctionComponent<ISberLentaState> = props => {\n    const {\n        needLimitMaxCategories, toggleMaxCategoriesRadioButton,\n        limitMaxCategoriesNumber, setLimitMaxCategoriesNumber,\n    } = props;\n\n    const onChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setLimitMaxCategoriesNumber(Number(event.target.value));\n    }\n\n    return (\n        <FormControl className={cnSberLenta('FormControl')}>\n            <FormLabel className={cnSberLenta('FormLabel')}>Ограничить максимальное количество категорий</FormLabel>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={needLimitMaxCategories}\n                            onChange={() => toggleMaxCategoriesRadioButton()}\n                            name='max-categories-form-control'\n                            color='primary'\n                        />\n                    }\n                    label=''\n                />\n            </FormGroup>\n            {needLimitMaxCategories && <TextField\n                className={cnSberLenta('FormFixedControl')}\n                id='max-results-limit'\n                label='Максимум категорий'\n                type='number'\n                onChange={onChange}\n                value={limitMaxCategoriesNumber}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n            />\n            }\n        </FormControl>\n    );\n};\n\n/**\n * Контрол ограничения максимального количества продуктов\n */\nexport const MaxProductsFormControl: React.FunctionComponent<ISberLentaState> = props => {\n    const {\n        needLimitMaxProducts, toggleMaxProductsRadioButton,\n        limitMaxProductsNumber, setLimitMaxProductsNumber,\n    } = props;\n\n    const onChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setLimitMaxProductsNumber(Number(event.target.value));\n    }\n\n    return (\n        <FormControl className={cnSberLenta('FormControl')}>\n            <FormLabel className={cnSberLenta('FormLabel')}>Ограничить максимальное количество продуктов</FormLabel>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={needLimitMaxProducts}\n                            onChange={() => toggleMaxProductsRadioButton()}\n                            name='max-products-form-control'\n                            color='primary'\n                        />\n                    }\n                    label=''\n                />\n            </FormGroup>\n            {\n                needLimitMaxProducts && <TextField\n                    className={cnSberLenta('FormFixedControl')}\n                    id='max-products-limit'\n                    label='Максимум продуктов'\n                    type='number'\n                    onChange={onChange}\n                    value={limitMaxProductsNumber}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n            }\n        </FormControl>\n    );\n};\n\n/**\n * Контрол получения информации из cache\n */\nexport const GetFromCacheFormControl: React.FunctionComponent<ISberLentaState> = React.memo(props => {\n    const {\n        needToGetCachedData,\n        toggleCachedDataRadioButton,\n    } = props;\n\n    const tooltipText = 'Если информация была обработана ранее - взять её. Это ускоряет получение результатов и уменьшает нагрузку на сервер.'\n\n    return (\n        <FormControl className={cnSberLenta('FormControl')}>\n            <FormLabel className={cnSberLenta('FormLabel')}>Взять информацию из кэша\n                <Tooltip title={tooltipText}>\n                    <IconButton className={cnSberLenta('FormQuestionTooltipIconButton')} size='small' aria-label={tooltipText}>\n                        <HelpOutlineIcon className={cnSberLenta('FormQuestionTooltipIcon')} />\n                    </IconButton>\n                </Tooltip>\n            </FormLabel>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={needToGetCachedData}\n                            onChange={() => toggleCachedDataRadioButton()}\n                            name='max-products-form-control'\n                            color='primary'\n                        />\n                    }\n                    label=''\n                />\n            </FormGroup>\n        </FormControl>\n    );\n});\n\n/**\n * Параметры для парсера, отправляемые на сервер\n */\nconst getRequestBody = (props: ISberLentaState) => {\n    const {\n        exportFormatVariants, requiredExportFields,\n        limitMaxProductsNumber, needLimitMaxProducts,\n        needToGetCachedData: cached,\n    } = props;\n\n    const exportFormat = exportFormatVariants.reduce((result, format) =>\n        format.isChecked ? format.type : result\n        , '');\n\n    const fields = requiredExportFields.reduce((result: IDefaultExportField['key'][], field) => {\n        if (field.isChecked) {\n            result.push(field.key);\n        }\n\n        return result;\n    }, []);\n\n    return {\n        type: 'sberlenta',\n        options: {\n            exportFormat,\n            fields,\n            maxProducts: needLimitMaxProducts ? limitMaxProductsNumber : null,\n            cached,\n        }\n    };\n};\n\nconst getRequestUrl = () => {\n    const host = window.location.hostname === 'localhost' ?\n        'http://localhost:3001' : 'https://tools-parser-api-backend.herokuapp.com';\n\n    return host + '/api/parser/sberlenta';\n}\n\n/**\n * Отправляем запрос на сервер для парсинга\n */\nconst sendRequest = (props: ISberLentaState) => {\n    const { setLoading, saveProductItems, saveTableHeaderFields } = props;\n\n    // --------------- TEMP START ---------------\n    // const localStorageResults = localStorage.getItem('results');\n    // if (localStorageResults) {\n    //     const results = JSON.parse(localStorageResults);\n\n    //     console.log(results);\n    //     saveProductItems(results.productItems);\n    //     saveTableHeaderFields(results.headerFields);\n    // }\n\n    // setLoading(false);\n\n    // return;\n    // --------------- TEMP END ---------------\n\n    const url = getRequestUrl();\n    const body = getRequestBody(props);\n\n    const request = fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    });\n\n    request\n        .then(response => response.json())\n        .then(response => {\n            setLoading(false);\n\n            // localStorage.setItem('results', JSON.stringify(json));\n\n            console.log(response);\n\n            if (response.success) {\n                saveProductItems(response.productItems);\n                saveTableHeaderFields(response.headerFields);\n                localStorage.setItem('results', JSON.stringify(response));\n            }\n\n            // if (json.error) {\n            //     // saveAlert({\n            //     //     // type: 'error',\n            //     //     title: json.errorText,\n            //     //     code: json.errorCode\n            //     // });\n            // }\n        })\n        .catch(error => {\n            console.log('error', error);\n            setLoading(false);\n        });\n\n    // if (isFile) {\n    //     request\n    //         .then(response => response.blob())\n    //         .then(blob => {\n    //             var url = window.URL.createObjectURL(blob);\n    //             var a = document.createElement('a');\n    //             a.href = url;\n    //             a.download = 'filename.xlsx';\n    //             document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\n    //             a.click();\n    //             a.remove();  //afterwards we remove the element again\n    //         });\n    // } else {\n    //     request\n    //         .then(response => response.json())\n    //         .then(json => {\n    //             console.log(json);\n\n    //             if (json.success) {\n    //                 setTableResults(json.response);\n\n    //                 // localStorage.setItem('results', JSON.stringify(json.response));\n    //             }\n\n    //             if (json.error) {\n    //                 // saveAlert({\n    //                 //     // type: 'error',\n    //                 //     title: json.errorText,\n    //                 //     code: json.errorCode\n    //                 // });\n    //             }\n    //         });\n    // }\n\n}\n\n/**\n * Кнопка начала парсинга данных\n */\nexport const StartFormParseButton: React.FunctionComponent<ISberLentaState> = props => {\n    const { isLoading, setLoading } = props;\n\n    const onStartButtonClick = () => {\n        setLoading(true);\n\n        sendRequest(props);\n    };\n\n    return (\n        <Button\n            className={cnSberLenta('FormParseButton')}\n            disabled={isLoading}\n            onClick={onStartButtonClick}\n            variant='contained'\n            color='primary'\n            endIcon={<ArrowForwardIosIcon />}\n        >\n            Старт\n        </Button>\n    )\n};\n\nconst SberLentaForm: React.FunctionComponent<ISberLentaState> = props => {\n    const [expanded, setExpanded] = useState(true);\n\n    return (\n        <form className={cnSberLenta('Form')} noValidate autoComplete='off'>\n            <RequiredFieldsFormControl\n                {...props}\n                expanded={expanded}\n                setExpanded={setExpanded}\n            />\n\n            <ExportFormatsFormControl\n                {...props}\n            />\n\n            {/* <MaxCategoriesFormControl\n                {...props}\n            /> */}\n\n            <MaxProductsFormControl\n                {...props}\n            />\n\n            <GetFromCacheFormControl\n                {...props}\n            />\n\n            <StartFormParseButton\n                {...props}\n            />\n        </form>\n    );\n};\n\nexport { SberLentaForm };\n","import React from 'react';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { cnSberLenta } from '../../component';\n\nimport {\n    SberLentaTableRow, StyledTableCell,\n} from '../../components';\n\nimport { ISberLentaState } from '../../../../../store/sbermarket/lenta/typings';\n\nimport './SberLentaTable.scss';\n\n/**\n * Шапка таблицы\n */\nexport const TableHeadComponent: React.FunctionComponent<ISberLentaState> = props => {\n    const { tableHeaderFields } = props;\n\n    if (!tableHeaderFields) return null;\n\n    return (\n        <TableHead>\n            <TableRow>\n                <StyledTableCell>#</StyledTableCell>\n                {tableHeaderFields.map(field => {\n                    return (\n                        <StyledTableCell key={field}>{field}</StyledTableCell>\n                    )\n                })}\n            </TableRow>\n        </TableHead>\n    );\n};\n\n/**\n * Тело таблицы\n */\nexport const TableBodyComponent: React.FunctionComponent<ISberLentaState> = props => {\n    const { productItems } = props;\n\n    if (!productItems) return null;\n\n    return (\n        <TableBody>\n            {productItems.map((products, rowIndex) => {\n                return (\n                    <SberLentaTableRow key={rowIndex} products={products} rowIndex={rowIndex} />\n                )\n            })}\n        </TableBody>\n    );\n};\n\n/**\n * Считаем максимально возможную высоту таблицы с учетом видимой области экрана\n */\nconst getMaxTableHeight = () => {\n    const clientHeight = document.documentElement.clientHeight;\n\n    /**\n     * Берем дополнительный небольшой отступ\n     */\n    const OFFSET = 30;\n\n    return (clientHeight - OFFSET) + 'px';\n};\n\n/**\n * Таблица с результатами\n */\nconst SberLentaTable: React.FunctionComponent<ISberLentaState> = props => {\n    const { productItems } = props;\n\n    const tableRef: React.MutableRefObject<HTMLDivElement | null> = React.useRef(null);\n\n    const scrollToTable = (ref: React.MutableRefObject<HTMLDivElement | null>) => {\n        const current = ref.current;\n\n        if (current && current.offsetTop) {\n            window.scrollTo({\n                top: current.offsetTop,\n                behavior: 'smooth'\n            });\n        }\n    }\n\n    React.useEffect(() => {\n        productItems && scrollToTable(tableRef);\n    }, [productItems]);\n\n    if (!productItems || !productItems.length) return null;\n\n    const maxTableHeight = getMaxTableHeight();\n\n    return (\n        <TableContainer\n            ref={tableRef}\n            className={cnSberLenta('TableContainer')}\n            component={Paper}\n            style={{ maxHeight: maxTableHeight }}\n        >\n            <Table\n                className={cnSberLenta('Table')}\n                stickyHeader size='small'\n                aria-label='Результаты парсинга'\n            >\n                <TableHeadComponent {...props} />\n                <TableBodyComponent {...props} />\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport { SberLentaTable };\n","import React from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport TableCell from '@material-ui/core/TableCell';\nimport Link from '@material-ui/core/Link';\n\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nimport { cnSberLenta } from '../../component';\n\nimport {\n    IProductAvaliableItem,\n\n    IProductName,\n    IProductImage,\n    IProductProperties,\n    IProductDescription,\n    IProductBreadcrumbs,\n    IProductNutrition,\n    IProductPrice,\n} from '../../../../../store/sbermarket/lenta/typings';\n\nimport './SberLentaTableCell.scss';\n\nexport const StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n/**\n * Ячейка с названием\n */\nexport interface IProductNameProps extends IProductName {\n    url: string | null;\n}\nexport const SberLentaTableCellName: React.FunctionComponent<IProductNameProps> = props => {\n    const { value, url } = props;\n\n    if (url) {\n        return (\n            <StyledTableCell>\n                <Link underline='none' className={cnSberLenta('CellLink')} href={url} target='_blank' title='Открыть в новом окне'>{value}</Link>\n            </StyledTableCell>\n        );\n    }\n\n    return (\n        <StyledTableCell>{value}</StyledTableCell>\n    );\n};\n\n/**\n * Ячейка с описанием\n */\nexport const SberLentaTableCellDescription: React.FunctionComponent<IProductDescription> = props => {\n    const { value } = props;\n\n    if (!value) {\n        return (\n            <SberLentaTableCellDefault />\n        );\n    }\n\n    const MAX_SYMBOLS_LIMIT = 50;\n    const slicedValue = value.slice(0, MAX_SYMBOLS_LIMIT);\n\n    return (\n        <StyledTableCell>{slicedValue}&#8230;</StyledTableCell>\n    );\n};\n\n/**\n * Ячейка с изображением\n */\nexport const SberLentaTableCellImage: React.FunctionComponent<IProductImage> = props => {\n    const { value } = props;\n\n    if (!value) {\n        return (\n            <SberLentaTableCellDefault />\n        );\n    }\n\n    return (\n        <StyledTableCell>\n            <LazyLoadImage className={cnSberLenta('CellImage')} src={value} />\n        </StyledTableCell>\n    );\n};\n\n/**\n * Ячейка с категорией\n */\nexport const SberLentaTableCellBreadCrumbs: React.FunctionComponent<IProductBreadcrumbs> = props => {\n    const { value } = props;\n\n    if (!value) {\n        return (\n            <SberLentaTableCellDefault />\n        );\n    }\n\n    const joinedValue = value.join(' / ');\n\n    return (\n        <StyledTableCell>\n            {joinedValue}\n        </StyledTableCell>\n    );\n};\n\n/**\n * Ячейка с разделителем по умолчанию (в случае отсутствия данных)\n */\nexport const SberLentaTableCellDefault: React.FunctionComponent = () => {\n    const EMPTY_CELL_DELIMITER = '-';\n\n    return (\n        <StyledTableCell>{EMPTY_CELL_DELIMITER}</StyledTableCell>\n    );\n};\n\n/**\n * Ячейка с ценой\n *\n * Original - цена без скидки\n * Default - цена со скидкой (или обычная)\n */\nexport const SberLentaTableCellPrice: React.FunctionComponent<IProductPrice> = props => {\n    const { value } = props;\n\n    if (!value || !value.default) {\n        return (\n            <SberLentaTableCellDefault />\n        );\n    }\n\n    if (value.default && value.original) {\n        return (\n            <StyledTableCell>\n                <span className={cnSberLenta('CellPriceOriginal')}>{value.original}</span>\n                <span className={cnSberLenta('CellPriceDefault', {\n                    'line-through': true\n                })}>{value.default}</span>\n            </StyledTableCell>\n        );\n    }\n\n    return (\n        <StyledTableCell className={cnSberLenta('CellPriceDefault')}>{value.default}</StyledTableCell>\n    );\n};\n\n/**\n * Ячейка с содержанием белков, жиров, углеводов и пищевой ценностью\n */\nexport const SberLentaTableCellNutrition: React.FunctionComponent<IProductNutrition> = props => {\n    const { value } = props;\n\n    if (!value) {\n        return (\n            <SberLentaTableCellDefault />\n        );\n    }\n\n    const joinedValue = value.reduce((result, current) => {\n        if (current.name && current.value) {\n            result += current.name + ': ' + current.value + '\\n'\n        }\n\n        return result;\n    }, '');\n\n    return (\n        <StyledTableCell className={cnSberLenta('CellWhiteSpace')}>{joinedValue}</StyledTableCell>\n    );\n};\n\n/**\n * Ячейка с дополнительными параметрами\n */\nexport const SberLentaTableCellProperties: React.FunctionComponent<IProductProperties> = props => {\n    const { value } = props;\n\n    if (!value) {\n        return (\n            <SberLentaTableCellDefault />\n        );\n    }\n\n    const joinedValue = value.reduce((result, current) => {\n        if (current.name && current.value) {\n            result += current.name + ': ' + current.value + '\\n'\n        }\n\n        return result;\n    }, '');\n\n    return (\n        <StyledTableCell className={cnSberLenta('CellWhiteSpace')}>{joinedValue}</StyledTableCell>\n    );\n};\n\n/**\n * Ячейка, показывающая данные по умолчанию\n */\nexport const SberLentaTableCellItem: React.FunctionComponent<IProductAvaliableItem> = props => {\n    const { value } = props;\n\n    if (!value) {\n        return (\n            <SberLentaTableCellDefault />\n        );\n    }\n\n    return (\n        <StyledTableCell>{value}</StyledTableCell>\n    )\n};\n","import React from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport TableRow from '@material-ui/core/TableRow';\n\nimport {\n    IResponseProductItemOrdered,\n    IProductAvaliableItem,\n\n    IProductProperties,\n    IProductName,\n    IProductImage,\n    IProductDescription,\n    IProductBreadcrumbs,\n    IProductNutrition,\n    IProductPrice,\n    IProductLink,\n} from '../../../../../store/sbermarket/lenta/typings';\n\nimport {\n    SberLentaTableCellName,\n    SberLentaTableCellDescription,\n    SberLentaTableCellImage,\n    SberLentaTableCellBreadCrumbs,\n    SberLentaTableCellPrice,\n    SberLentaTableCellNutrition,\n    SberLentaTableCellProperties,\n\n    SberLentaTableCellDefault,\n    SberLentaTableCellItem,\n\n    StyledTableCell,\n} from '../SberLentaTableCell/SberLentaTableCell';\n\nimport './SberLentaTableRow.scss';\n\nexport const StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\n/**\n * Парсим ячейки продукта по полям в зависимости от типа поля\n */\nexport const parseProductCell = (product: IProductAvaliableItem, url: string | null) => {\n    switch (product.type) {\n        case 'name':\n            return (\n                <SberLentaTableCellName url={url} {...product as IProductName} />\n            );\n\n        case 'description':\n            return (\n                <SberLentaTableCellDescription {...product as IProductDescription} />\n            );\n\n        case 'image':\n            return (\n                <SberLentaTableCellImage {...product as IProductImage} />\n            );\n\n        case 'breadcrumbs':\n            return (\n                <SberLentaTableCellBreadCrumbs {...product as IProductBreadcrumbs} />\n            );\n\n        case 'price':\n            return (\n                <SberLentaTableCellPrice {...product as IProductPrice} />\n            );\n\n        case 'nutrition':\n            return (\n                <SberLentaTableCellNutrition {...product as IProductNutrition} />\n            );\n\n        case 'properties':\n            return (\n                <SberLentaTableCellProperties {...product as IProductProperties} />\n            );\n\n        case 'stock':\n        case 'weight':\n            return (\n                <SberLentaTableCellItem {...product} />\n            );\n\n        /**\n         * Не рисуем ссылку, т.к. она может быть в названии\n         */\n        case 'link':\n            return null;\n\n        /**\n         * По умолчанию рисуем пустое поле\n         */\n        default:\n            return (\n                <SberLentaTableCellDefault />\n            );\n    }\n};\n\n/**\n * Строка таблицы\n */\nexport interface ITableRowItemProps {\n    products: IResponseProductItemOrdered;\n    rowIndex: number;\n}\nexport const SberLentaTableRow: React.FunctionComponent<ITableRowItemProps> = props => {\n    const { products, rowIndex } = props;\n\n    const link = products.find(product => product.type === 'link') as IProductLink;\n    const linkUrl = link ? link.value : null;\n\n    const tableCellsData = products.map(product => {\n        const Cell = parseProductCell(product, linkUrl);\n\n        return (\n            <React.Fragment key={product.type + rowIndex}>\n                {Cell}\n            </React.Fragment>\n        );\n    });\n\n    return (\n        <StyledTableRow>\n            <StyledTableCell>{rowIndex + 1}</StyledTableCell>\n            {tableCellsData}\n        </StyledTableRow>\n    )\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nimport { Page, cnPage } from '../../../components/Page/Page';\n\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport { cn } from '@bem-react/classname';\n\nimport {\n    SberLentaBreadcrumbs, SberLentaForm, SberLentaTable,\n} from './components';\n\nimport { ISberLentaState } from '../../../store/sbermarket/lenta/typings';\n\nimport './sberlenta.scss';\n\nexport const cnSberLenta = cn('SberLenta');\n\nconst SberLentaPage: React.FC<ISberLentaState> = props => {\n    const { isLoading } = props;\n\n    return (\n        <Page className={cnSberLenta()}>\n            <SberLentaBreadcrumbs {...props} />\n\n            <Typography paragraph>\n                Парсер ассортимента \"Лента\" Сбермаркет <Link\n                    className={cnSberLenta('SourceLink')}\n                    target='_blank'\n                    href='https://sbermarket.ru/lenta'\n                    title='Открыть в новой вкладке'\n                >(sbermarket.ru/lenta)</Link> позволяет получать информацию о товарах из всех категорий, представленных на сайте.\n            </Typography>\n            <Typography className={cnPage('TextOption')}>Дополнительные параметры.</Typography>\n\n            <SberLentaForm {...props} />\n\n            {isLoading && <LinearProgress className={cnSberLenta('Progress')} />}\n\n            <SberLentaTable {...props} />\n        </Page >\n    );\n}\n\nexport { SberLentaPage };\n","import { connect } from 'react-redux';\nimport { SberLentaPage as SberLentaPageProvider } from './component';\n\nimport { ISberLentaVars, ISberLentaMethods } from '../../../store/sbermarket/lenta/typings';\n\nimport {\n    actions\n} from '../../../store/sbermarket/lenta/actions';\n\nimport { IAppState } from '../../../store/typings';\n\nconst {\n    changeCheckboxDefaultExportFields,\n    changeExportFormatVariants,\n\n    toggleMaxCategoriesRadioButton,\n    toggleMaxProductsRadioButton,\n\n    setLimitMaxCategoriesNumber,\n    setLimitMaxProductsNumber,\n\n    setLoading,\n    toggleCachedDataRadioButton,\n\n    saveProductItems,\n    saveTableHeaderFields,\n} = actions;\n\nconst mapStateToProps = (state: IAppState): ISberLentaVars => {\n    return {\n        isLoading: state.sberLenta.isLoading,\n        needToGetCachedData: state.sberLenta.needToGetCachedData,\n\n        needLimitMaxCategories: state.sberLenta.needLimitMaxCategories,\n        needLimitMaxProducts: state.sberLenta.needLimitMaxProducts,\n\n        requiredExportFields: state.sberLenta.requiredExportFields,\n        exportFormatVariants: state.sberLenta.exportFormatVariants,\n\n        limitMaxCategoriesNumber: state.sberLenta.limitMaxCategoriesNumber,\n        limitMaxProductsNumber: state.sberLenta.limitMaxProductsNumber,\n\n        productItems: state.sberLenta.productItems,\n        tableHeaderFields: state.sberLenta.tableHeaderFields,\n    };\n}\n\nconst mapDispatchToProps: ISberLentaMethods = {\n    changeCheckboxDefaultExportFields,\n    changeExportFormatVariants,\n\n    toggleMaxCategoriesRadioButton,\n    toggleMaxProductsRadioButton,\n\n    setLimitMaxCategoriesNumber,\n    setLimitMaxProductsNumber,\n\n    setLoading,\n    toggleCachedDataRadioButton,\n\n    saveProductItems,\n    saveTableHeaderFields,\n};\n\nconst SberLentaPage = connect(mapStateToProps, mapDispatchToProps)(SberLentaPageProvider);\n\nexport { SberLentaPage };\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../../store/reducers';\n\nimport { SberLentaPage } from '../../pages/sbermarket/lenta';\n\nimport './App.scss';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <div className='App'>\n                <SberLentaPage />\n            </div>\n        </Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}