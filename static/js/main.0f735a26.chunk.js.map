{"version":3,"sources":["components/Page/index.js","components/Page/Page.jsx","components/App/App.tsx","serviceWorker.js","index.js"],"names":["cnPage","cn","defaultRequiredFields","name","value","price","weight","RequiredFormControl","handleChangeRequiredFields","requiredFields","FormControl","className","FormLabel","FormGroup","Object","keys","map","key","FormControlLabel","control","Checkbox","checked","onChange","label","Page","React","useState","setRequiredFields","exportFormat","toggleExportFormat","isLimitedResultsCount","setLimitResultsCount","maxResultLimitCountValue","handleMaxResultLimitCountValue","isLoading","setLoading","tableResults","setTableResults","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","noValidate","autoComplete","Typography","paragraph","Link","target","href","title","changedField","InputLabel","id","Select","labelId","event","MenuItem","TextField","type","e","InputLabelProps","shrink","Button","disabled","onClick","console","log","JSON","stringify","source","categories","fields","request","fetch","HOST","method","mode","headers","then","response","json","success","variant","endIcon","TableContainer","component","Paper","Table","aria-label","TableHead","colSpan","align","TableBody","row","i","product","productItems","reduce","result","categoryName","scope","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f735a26.chunk.js","sourcesContent":["import { cn } from '@bem-react/classname';\n\nexport const cnPage = cn('Page');\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport TextField from '@material-ui/core/TextField';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\nimport { cnPage } from './';\n\nimport './Page.scss';\nimport { cn } from '@bem-react/classname';\n\nconst defaultRequiredFields = {\n    name: {\n        value: true,\n        name: 'Название'\n    },\n    price: {\n        value: true,\n        name: 'Цена'\n    },\n    weight: {\n        value: true,\n        name: 'Вес'\n    },\n};\n\nconst RequiredFormControl = ({ handleChangeRequiredFields, requiredFields }) => {\n    return (\n        <FormControl className={cnPage('RequiredFields')}>\n            <FormLabel className={cnPage('RequiredFieldsLabel')}>Необходимые поля</FormLabel>\n            <FormGroup>\n                {Object.keys(requiredFields).map(key => {\n                    const { name, value } = requiredFields[key];\n\n                    return (\n                        <FormControlLabel\n                            key={name}\n                            control={<Checkbox checked={value} onChange={handleChangeRequiredFields} name={key} />}\n                            label={name}\n                        />\n                    );\n                })}\n            </FormGroup>\n        </FormControl>\n    );\n};\n\nconst Page = () => {\n    const [requiredFields, setRequiredFields] = React.useState(defaultRequiredFields);\n    const [exportFormat, toggleExportFormat] = React.useState('table');\n    const [isLimitedResultsCount, setLimitResultsCount] = React.useState(false);\n    const [maxResultLimitCountValue, handleMaxResultLimitCountValue] = React.useState(50);\n    const [isLoading, setLoading] = React.useState(false);\n    const [tableResults, setTableResults] = React.useState(null);\n\n    const onStartButtonClick = () => {\n        console.log('start button click');\n\n        setLoading(true);\n\n        // const HOST = 'http://localhost:3001' || 'https://tools-parser-api-backend.herokuapp.com';\n        const HOST = 'https://tools-parser-api-backend.herokuapp.com';\n        const url = HOST + '/api/parser';\n\n        const body = JSON.stringify({\n            source: 'sbermarket',\n            categories: 'all',\n            fields: ['cost', 'weight', 'name']\n        });\n\n        const request = fetch(url, {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body\n        });\n\n        const isFile = false;\n\n        if (isFile) {\n            request\n                .then(response => response.blob())\n                .then(blob => {\n                    var url = window.URL.createObjectURL(blob);\n                    var a = document.createElement('a');\n                    a.href = url;\n                    a.download = 'filename.xlsx';\n                    document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\n                    a.click();\n                    a.remove();  //afterwards we remove the element again\n\n                    setLoading(false);\n                });\n        } else {\n            request\n                .then(response => response.json())\n                .then(json => {\n                    setLoading(false);\n\n                    console.log(json);\n\n                    if (json.success) {\n                        setTableResults(json.response);\n                    }\n                });\n        }\n\n    };\n\n    const handleExportFormat = (event) => {\n        toggleExportFormat(event.target.value);\n    };\n\n    const handleChangeRequiredFields = ({ target }) => {\n        const { name } = target;\n\n        const changedField = requiredFields[name];\n        changedField.value = !changedField.value;\n\n        setRequiredFields({\n            ...requiredFields,\n            [name]: changedField\n        });\n    };\n\n    const StyledTableCell = withStyles((theme) => ({\n        head: {\n            backgroundColor: theme.palette.common.black,\n            color: theme.palette.common.white,\n        },\n        body: {\n            fontSize: 14,\n        },\n    }))(TableCell);\n\n    const StyledTableRow = withStyles((theme) => ({\n        root: {\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.action.hover,\n            },\n        },\n    }))(TableRow);\n\n    return (\n        <div className={cnPage()}>\n            <form className={cnPage('Form')} noValidate autoComplete=\"off\">\n                <Typography paragraph>\n                    Парсер ассортимента \"Лента\" Сбермаркет <Link className={cnPage('SourceLink')} target='_blank' href='https://sbermarket.ru/lenta' title='Открыть в новой вкладке'>(sbermarket.ru/lenta)</Link> позволяет получать содержимое всех категорий товаров.\n            </Typography>\n                <Typography className={cnPage('TextOption')}>\n                    Дополнительные параметры\n                </Typography>\n\n                <RequiredFormControl\n                    requiredFields={requiredFields}\n                    handleChangeRequiredFields={handleChangeRequiredFields}\n                />\n\n                <FormControl className={cnPage('ExportFormControl')}>\n                    <InputLabel id='export-form-control-label'>Формат выходных данных</InputLabel>\n                    <Select\n                        className={cnPage('ExportFormControlSelect')}\n                        labelId='export-form-control-label'\n                        id='export-form-control-label'\n                        value={exportFormat}\n                        onChange={handleExportFormat}\n                    >\n                        <MenuItem name='table' value='table'>В таблице на сайте</MenuItem>\n                        <MenuItem name='file' value='file'>Экспорт в файл</MenuItem>\n                    </Select>\n                </FormControl>\n\n                <div className={cnPage('MaxResultsBlock')}>\n                    <FormControl className={cnPage('RequiredFields')}>\n                        <FormLabel className={cnPage('RequiredFieldsLabel')}>Ограничить максимальное число результатов</FormLabel>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={<Checkbox\n                                    checked={isLimitedResultsCount}\n                                    onChange={() => setLimitResultsCount(!isLimitedResultsCount)}\n                                    name='max-results-limit-count'\n                                />}\n                            />\n                        </FormGroup>\n                    </FormControl>\n\n                    {isLimitedResultsCount && <TextField\n                        className={cnPage('MaxLimit')}\n                        id='max-results-limit'\n                        label='Максимум позиций'\n                        type='number'\n                        onChange={e => handleMaxResultLimitCountValue(e.target.value)}\n                        value={maxResultLimitCountValue}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    }\n                </div>\n\n                <Button\n                    disabled={isLoading}\n                    onClick={onStartButtonClick}\n                    variant='contained'\n                    color='primary'\n                    endIcon={<ArrowForwardIosIcon />}\n                >\n                    Старт\n                </Button>\n            </form>\n\n            {tableResults && <div className={cnPage('ResultsTable')}>\n                <TableContainer component={Paper}>\n                    <Table aria-label='Результаты парсинга'>\n                        <TableHead>\n                            <TableRow>\n                                <StyledTableCell>#</StyledTableCell>\n                                <StyledTableCell>Категория</StyledTableCell>\n                                <StyledTableCell colSpan={3} align=\"center\">Товары</StyledTableCell>\n                                {/* <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell> */}\n                                {/* <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell> */}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableResults.map((row, i) => {\n                                const product = row.productItems.reduce((result, product, i) => {\n                                    result += (i + 1) + '. ' + product.title + '\\n' + product.price + '\\n' + product.weight + '\\n\\n';\n\n                                    return result;\n                                }, '');\n\n                                console.log('product', product);\n\n                                return (\n                                    <StyledTableRow key={row.categoryName}>\n                                        <StyledTableCell component='th' scope='row'>\n                                            {i + 1}\n                                        </StyledTableCell>\n                                        <StyledTableCell>{row.categoryName}</StyledTableCell>\n                                        <StyledTableCell className={cnPage('ProductItem')}>{product}</StyledTableCell>\n                                    </StyledTableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n            }\n        </div>\n    );\n}\n\nexport default Page;\n","import React from 'react';\nimport Page from '../Page/Page.jsx';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <CssBaseline />\n      <Page />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}