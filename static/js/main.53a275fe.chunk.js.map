{"version":3,"sources":["components/Page/index.js","components/Page/Page.jsx","components/App/App.tsx","serviceWorker.js","index.js"],"names":["cnPage","cn","defaultRequiredFields","name","isChecked","price","weight","image","link","RequiredFormControl","handleChangeRequiredFields","requiredFields","FormControl","className","FormLabel","FormGroup","Object","keys","map","key","FormControlLabel","control","Checkbox","checked","onChange","label","Page","React","useState","setRequiredFields","exportFormat","toggleExportFormat","isLimitedResultsCount","setLimitResultsCount","maxResultLimitCountValue","handleMaxResultLimitCountValue","isLoading","setLoading","tableResults","setTableResults","alert","saveAlert","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","showScroll","noValidate","autoComplete","Typography","paragraph","Link","target","href","title","changedField","InputLabel","id","Select","labelId","value","event","MenuItem","TextField","type","e","InputLabelProps","shrink","Button","disabled","onClick","console","log","url","window","location","hostname","JSON","stringify","source","categories","fields","request","fetch","method","mode","headers","then","response","json","success","error","errorText","code","errorCode","variant","endIcon","TableContainer","component","Paper","Table","size","aria-label","TableHead","style","minWidth","TableBody","category","categoryIndex","categoryName","categoryLink","productItems","productItemsCount","length","product","productIndex","default","original","Fragment","crossed","verticalAlign","scope","colSpan","alt","src","Alert","onClose","severity","AlertTitle","scrollTo","top","behavior","App","CssBaseline","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.53a275fe.chunk.js","sourcesContent":["import { cn } from '@bem-react/classname';\n\nexport const cnPage = cn('Page');\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport TextField from '@material-ui/core/TextField';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\n// import { AutoSizer, Column, Table } from 'react-virtualized';\n\nimport { cnPage } from './';\n\nimport './Page.scss';\n\nconst defaultRequiredFields = {\n    name: {\n        isChecked: true,\n        name: 'Название'\n    },\n    price: {\n        isChecked: true,\n        name: 'Цена'\n    },\n    weight: {\n        isChecked: true,\n        name: 'Вес'\n    },\n    image: {\n        isChecked: true,\n        name: 'Изображение'\n    },\n    link: {\n        isChecked: true,\n        name: 'Ссылка'\n    }\n};\n\nconst RequiredFormControl = ({ handleChangeRequiredFields, requiredFields }) => {\n    return (\n        <FormControl className={cnPage('RequiredFields')}>\n            <FormLabel className={cnPage('RequiredFieldsLabel')}>Необходимые поля</FormLabel>\n            <FormGroup>\n                {Object.keys(requiredFields).map(key => {\n                    const { name, isChecked } = requiredFields[key];\n\n                    return (\n                        <FormControlLabel\n                            key={name}\n                            control={<Checkbox checked={isChecked} onChange={handleChangeRequiredFields} name={key} />}\n                            label={name}\n                        />\n                    );\n                })}\n            </FormGroup>\n        </FormControl>\n    );\n};\n\nconst Page = () => {\n    const [requiredFields, setRequiredFields] = React.useState(defaultRequiredFields);\n    const [exportFormat, toggleExportFormat] = React.useState('table');\n    const [isLimitedResultsCount, setLimitResultsCount] = React.useState(false);\n    const [maxResultLimitCountValue, handleMaxResultLimitCountValue] = React.useState(50);\n    const [isLoading, setLoading] = React.useState(false);\n    const [tableResults, setTableResults] = React.useState(null);\n    const [alert, saveAlert] = React.useState(null);\n    const [isScrollerTopVisible, setScrollerTopVisible] = React.useState(false);\n\n    // const resultsFromStorage = localStorage.getItem('results');\n\n    // if (resultsFromStorage && !tableResults) {\n    //     setTableResults(JSON.parse(resultsFromStorage));\n    // }\n\n    const onStartButtonClick = () => {\n        console.log('start button click');\n\n        setLoading(true);\n\n        const host = window.location.hostname === 'localhost' ?\n            'http://localhost:3001' : 'https://tools-parser-api-backend.herokuapp.com';\n\n        const url = host + '/api/parser';\n\n        const body = JSON.stringify({\n            source: 'sbermarket',\n            categories: 'all',\n            fields: ['cost', 'weight', 'name']\n        });\n\n        const request = fetch(url, {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body\n        });\n\n        const isFile = false;\n\n        if (isFile) {\n            request\n                .then(response => response.blob())\n                .then(blob => {\n                    var url = window.URL.createObjectURL(blob);\n                    var a = document.createElement('a');\n                    a.href = url;\n                    a.download = 'filename.xlsx';\n                    document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\n                    a.click();\n                    a.remove();  //afterwards we remove the element again\n\n                    setLoading(false);\n                });\n        } else {\n            request\n                .then(response => response.json())\n                .then(json => {\n                    setLoading(false);\n\n                    console.log(json);\n\n                    if (json.success) {\n                        setTableResults(json.response);\n\n                        // localStorage.setItem('results', JSON.stringify(json.response));\n                    }\n\n                    if (json.error) {\n                        saveAlert({\n                            type: 'error',\n                            title: json.errorText,\n                            code: json.errorCode\n                        });\n                    }\n                });\n        }\n\n    };\n\n    const handleExportFormat = (event) => {\n        toggleExportFormat(event.target.value);\n    };\n\n    const handleChangeRequiredFields = ({ target }) => {\n        const { name } = target;\n\n        const changedField = requiredFields[name];\n        changedField.isChecked = !changedField.isChecked;\n\n        setRequiredFields({\n            ...requiredFields,\n            [name]: changedField\n        });\n    };\n\n    const StyledTableCell = withStyles((theme) => ({\n        head: {\n            backgroundColor: theme.palette.common.black,\n            color: theme.palette.common.white,\n        },\n        body: {\n            fontSize: 14,\n        },\n    }))(TableCell);\n\n    const StyledTableRow = withStyles((theme) => ({\n        root: {\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.action.hover,\n            },\n        },\n    }))(TableRow);\n\n    const [showScroll, setShowScroll] = React.useState(false)\n\n    const checkScrollTop = () => {\n        if (!showScroll && window.pageYOffset > 400) {\n            setShowScroll(true)\n        } else if (showScroll && window.pageYOffset <= 400) {\n            setShowScroll(false)\n        }\n    };\n\n    const scrollTop = () => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    };\n\n    // window.addEventListener('scroll', checkScrollTop)\n\n    return (\n        <div className={cnPage()}>\n            <form className={cnPage('Form')} noValidate autoComplete=\"off\">\n                <Typography paragraph>\n                    Парсер ассортимента \"Лента\" Сбермаркет <Link className={cnPage('SourceLink')} target='_blank' href='https://sbermarket.ru/lenta' title='Открыть в новой вкладке'>(sbermarket.ru/lenta)</Link> позволяет получать содержимое всех категорий товаров.\n                </Typography>\n                <Typography className={cnPage('TextOption')}>\n                    Дополнительные параметры\n                </Typography>\n\n                <RequiredFormControl\n                    requiredFields={requiredFields}\n                    handleChangeRequiredFields={handleChangeRequiredFields}\n                />\n\n                <FormControl className={cnPage('ExportFormControl')}>\n                    <InputLabel id='export-form-control-label'>Формат выходных данных</InputLabel>\n                    <Select\n                        className={cnPage('ExportFormControlSelect')}\n                        labelId='export-form-control-label'\n                        id='export-form-control-label'\n                        value={exportFormat}\n                        onChange={handleExportFormat}\n                    >\n                        <MenuItem name='table' value='table'>В таблице на сайте</MenuItem>\n                        <MenuItem name='file' value='file'>Экспорт в файл</MenuItem>\n                    </Select>\n                </FormControl>\n\n                <div className={cnPage('MaxResultsBlock')}>\n                    <FormControl className={cnPage('RequiredFields')}>\n                        <FormLabel className={cnPage('RequiredFieldsLabel')}>Ограничить максимальное число результатов</FormLabel>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={<Checkbox\n                                    checked={isLimitedResultsCount}\n                                    onChange={() => setLimitResultsCount(!isLimitedResultsCount)}\n                                    name='max-results-limit-count'\n                                />}\n                            />\n                        </FormGroup>\n                    </FormControl>\n\n                    {isLimitedResultsCount && <TextField\n                        className={cnPage('MaxLimit')}\n                        id='max-results-limit'\n                        label='Максимум позиций'\n                        type='number'\n                        onChange={e => handleMaxResultLimitCountValue(e.target.value)}\n                        value={maxResultLimitCountValue}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    }\n                </div>\n\n                <Button\n                    disabled={isLoading}\n                    onClick={onStartButtonClick}\n                    variant='contained'\n                    color='primary'\n                    endIcon={<ArrowForwardIosIcon />}\n                >\n                    Старт\n                </Button>\n            </form>\n\n            {tableResults && <div className={cnPage('ResultsTable')}>\n                <TableContainer component={Paper}>\n                    <Table size='small' aria-label='Результаты парсинга'>\n                        <TableHead>\n                            <TableRow>\n                                <StyledTableCell>#</StyledTableCell>\n                                <StyledTableCell>Название</StyledTableCell>\n                                <StyledTableCell>Цена</StyledTableCell>\n                                <StyledTableCell style={{ minWidth: '90px' }}>Вес</StyledTableCell>\n                                <StyledTableCell>Изображение</StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableResults.map((category, categoryIndex) => {\n                                const { categoryName, categoryLink, productItems } = category;\n\n                                const productItemsCount = productItems.length;\n\n                                return productItems.map((product, productIndex) => {\n                                    let price;\n\n                                    /**\n                                     * original - цена до скидки (перечеркнутая)\n                                     * default - цена после скидки (актуальная), либо если скидки нет\n                                     */\n                                    if (product.price) {\n                                        if (product.price.default && product.price.original) {\n                                            price = (\n                                                <React.Fragment>\n                                                    <span className={cnPage('ProductItemPriceOriginal', {\n                                                        crossed: true\n                                                    })}>{product.price.original}</span>\n                                                    <span className={cnPage('ProductItemPriceDefault')}>{product.price.default}</span>\n                                                </React.Fragment>\n                                            )\n                                        } else if (product.price.default) {\n                                            price = (\n                                                <span className={cnPage('ProductItemPriceOriginal')}>{product.price.default}</span>\n                                            );\n                                        }\n                                    }\n\n                                    return (\n                                        <React.Fragment key={product.title + productIndex}>\n                                            {productIndex === 0 && (\n                                                <StyledTableRow className={cnPage('ProductItemCategory')}>\n                                                    <StyledTableCell style={{ verticalAlign: 'top' }} component='th' scope='row'>{categoryIndex + 1}</StyledTableCell>\n                                                    <StyledTableCell style={{ verticalAlign: 'top' }} colSpan={7}>\n                                                        <Link className={cnPage('ProductItemCategoryLink')} href={categoryLink} target='_blank' title='Открыть в новой вкладке'>\n                                                            {categoryName} &#8226; {productItemsCount} шт.\n                                                        </Link>\n                                                    </StyledTableCell>\n                                                    {/* <StyledTableCell style={{ verticalAlign: 'top' }}>{productItemsCount}</StyledTableCell> */}\n                                                </StyledTableRow>\n                                            )}\n                                            <StyledTableRow>\n                                                <StyledTableCell>{categoryIndex + 1}.{productIndex + 1}</StyledTableCell>\n                                                <StyledTableCell>\n                                                    {/* Link or just a product name */}\n                                                    {true ? (\n                                                        <Link title='Открыть в новой вкладке' href={product.link} target='_blank'>{product.title}</Link>\n                                                    ) : product.title}\n                                                </StyledTableCell>\n                                                <StyledTableCell className={cnPage('ProductItemPrice')}>{price}</StyledTableCell>\n                                                <StyledTableCell>{product.weight}</StyledTableCell>\n                                                <StyledTableCell>\n                                                    <LazyLoadImage\n                                                        className={cnPage('ProductItemImage')}\n                                                        alt='Изображение товара'\n                                                        src={product.image}\n                                                    />\n                                                </StyledTableCell>\n                                            </StyledTableRow>\n                                        </React.Fragment>\n                                    )\n                                })\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n            }\n\n            {\n                alert && <div className='alerts'>\n                    <Alert className='alert' onClose={() => saveAlert(null)} severity={alert.type}>\n                        <AlertTitle>{alert.title}</AlertTitle>\n                        {alert.code && <strong>Код ошибки - {alert.code}</strong>}\n                    </Alert>\n                </div>\n            }\n\n            {\n                showScroll && (\n                    <div onClick={scrollTop} className={'ScrollerTop'}>\n                        <ArrowUpwardIcon className={'ScrollerTopIcon'} />\n                    </div>\n                )\n            }\n        </div >\n    );\n}\n\nexport default Page;\n","import React from 'react';\nimport Page from '../Page/Page.jsx';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <CssBaseline />\n      <Page />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}