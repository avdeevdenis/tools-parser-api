{"version":3,"sources":["store/sbermarket/lenta/actions.tsx","store/sbermarket/lenta/reducers.tsx","store/sbermarket/lenta/constants.tsx","store/reducers.tsx","components/Page/Page.tsx","pages/sbermarket/lenta/constants.tsx","pages/sbermarket/lenta/components/SberLentaBreadcrumbs/SberLentaBreadcrumbs.tsx","pages/sbermarket/lenta/components/SberLentaForm/SberLentaForm.tsx","pages/sbermarket/lenta/index.tsx","pages/sbermarket/lenta/page.tsx","components/App/App.tsx","serviceWorker.js","index.js"],"names":["actions","payload","type","defaultState","isLoading","requiredExportFields","isChecked","name","key","exportFormatVariants","text","needLimitMaxCategories","needLimitMaxProducts","limitMaxCategoriesNumber","limitMaxProductsNumber","needToGetCachedData","replaceArrayReduxAction","array","changedIndex","replacedItem","slice","combineReducers","sberLenta","state","action","console","log","reduce","result","field","index","map","variant","cnPage","cn","Page","props","className","children","cnSberLenta","StyledBreadcrumb","withStyles","theme","root","backgroundColor","palette","grey","height","spacing","color","fontWeight","typography","fontWeightRegular","boxShadow","shadows","emphasize","Chip","SberLentaBreadcrumbs","Breadcrumbs","separator","aria-label","label","icon","fontSize","RequiredFieldsFormControl","onChange","changeCheckboxDefaultExportFields","controls","onChangeHandler","event","target","FormControl","FormLabel","FormGroup","FormControlLabel","control","Checkbox","checked","ExportFormatsFormControl","formats","changeExportFormatVariants","selectedFormat","find","format","InputLabel","id","Select","labelId","value","MenuItem","MaxCategoriesFormControl","toggleMaxCategoriesRadioButton","setLimitMaxCategoriesNumber","Switch","TextField","Number","InputLabelProps","shrink","MaxProductsFormControl","toggleMaxProductsRadioButton","setLimitMaxProductsNumber","GetFromCacheFormControl","toggleCachedDataRadioButton","tooltipText","Tooltip","title","IconButton","size","StartFormParseButton","setLoading","Button","disabled","onClick","setTimeout","endIcon","SberLentaForm","noValidate","autoComplete","SberLentaPage","React","useState","tableResults","alert","StyledTableCell","head","common","black","white","body","TableCell","hover","TableRow","Typography","paragraph","Link","href","LinearProgress","TableContainer","component","Paper","Table","TableHead","style","minWidth","TableBody","mapDispatchToProps","connect","store","createStore","rootReducer","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b97d82a.chunk.js","sourcesContent":["import { IDefaultExportField, IDefaultExportFormat, ISberLentaVars } from './';\n\nexport const CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS = 'CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS';\nexport const CHANGE_EXPORT_FORMAT_VARIANTS = 'CHANGE_EXPORT_FORMAT_VARIANTS';\n\nexport const TOGGLE_MAX_CATEGORIES_RADIO_BUTTON = 'TOGGLE_MAX_CATEGORIES_RADIO_BUTTON';\nexport const TOGGLE_MAX_PRODUCTS_RADIO_BUTTON = 'TOGGLE_MAX_PRODUCTS_RADIO_BUTTON';\n\nexport const SET_LIMIT_MAX_CATEGORIES_NUMBER = 'SET_LIMIT_MAX_CATEGORIES_NUMBER';\nexport const SET_LIMIT_MAX_PRODUCTS_NUMBER = 'SET_LIMIT_MAX_PRODUCTS_NUMBER';\n\nexport const SET_LOADING = 'SET_LOADING';\nexport const TOGGLE_CACHED_DATA_RADIO_BUTTON = 'TOGGLE_CACHED_DATA_RADIO_BUTTON';\n\nexport interface ISberLentaMethods {\n    changeCheckboxDefaultExportFields: (payload: IDefaultExportField['name']) => void;\n    changeExportFormatVariants: (payload: IDefaultExportFormat['type']) => void;\n\n    toggleMaxCategoriesRadioButton: () => void;\n    toggleMaxProductsRadioButton: () => void;\n\n    setLimitMaxCategoriesNumber: (payload: ISberLentaVars['limitMaxCategoriesNumber']) => void;\n    setLimitMaxProductsNumber: (payload: ISberLentaVars['limitMaxProductsNumber']) => void;\n\n    setLoading: (payload: ISberLentaVars['isLoading']) => void;\n    toggleCachedDataRadioButton: () => void;\n}\n\nconst actions: ISberLentaMethods = {\n    changeCheckboxDefaultExportFields: payload => ({\n        type: CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS,\n        payload,\n    }),\n\n    changeExportFormatVariants: payload => ({\n        type: CHANGE_EXPORT_FORMAT_VARIANTS,\n        payload,\n    }),\n\n    toggleMaxCategoriesRadioButton: () => ({\n        type: TOGGLE_MAX_CATEGORIES_RADIO_BUTTON,\n    }),\n\n    toggleMaxProductsRadioButton: () => ({\n        type: TOGGLE_MAX_PRODUCTS_RADIO_BUTTON,\n    }),\n\n    setLimitMaxCategoriesNumber: payload => ({\n        type: SET_LIMIT_MAX_CATEGORIES_NUMBER,\n        payload,\n    }),\n\n    setLimitMaxProductsNumber: payload => ({\n        type: SET_LIMIT_MAX_PRODUCTS_NUMBER,\n        payload,\n    }),\n\n    setLoading: payload => ({\n        type: SET_LOADING,\n        payload,\n    }),\n\n    toggleCachedDataRadioButton: () => ({\n        type: TOGGLE_CACHED_DATA_RADIO_BUTTON,\n    }),\n}\n\nexport { actions };\n","import { IGlobalReduxAction } from '../../typings';\n\nimport {\n    CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS,\n    CHANGE_EXPORT_FORMAT_VARIANTS,\n\n    TOGGLE_MAX_PRODUCTS_RADIO_BUTTON,\n    TOGGLE_MAX_CATEGORIES_RADIO_BUTTON,\n\n    SET_LIMIT_MAX_CATEGORIES_NUMBER,\n    SET_LIMIT_MAX_PRODUCTS_NUMBER,\n\n    SET_LOADING,\n    TOGGLE_CACHED_DATA_RADIO_BUTTON,\n} from './actions';\n\nimport {\n    DEFAULT_EXPORT_FIELDS, IDefaultExportField,\n    DEFAULT_EXPORT_FORMATS, IDefaultExportFormat,\n} from './constants';\n\nexport interface ISberLentaVars {\n    isLoading: boolean;\n    needToGetCachedData: boolean;\n\n    requiredExportFields: IDefaultExportField[];\n    exportFormatVariants: IDefaultExportFormat[];\n\n    needLimitMaxCategories: boolean;\n    needLimitMaxProducts: boolean;\n\n    limitMaxCategoriesNumber: number;\n    limitMaxProductsNumber: number;\n};\n\nconst defaultState: ISberLentaVars = {\n    isLoading: false,\n    requiredExportFields: DEFAULT_EXPORT_FIELDS,\n    exportFormatVariants: DEFAULT_EXPORT_FORMATS,\n\n    needLimitMaxCategories: false,\n    needLimitMaxProducts: false,\n\n    limitMaxCategoriesNumber: 10,\n    limitMaxProductsNumber: 100,\n\n    needToGetCachedData: true,\n};\n\n/**\n * Заменяет элемент массива на другой, не модифицируя исходный массив\n */\nexport const replaceArrayReduxAction = (array: object[], changedIndex: number = 0, replacedItem?: object) => {\n    return [\n        ...array.slice(0, changedIndex),\n        replacedItem,\n        ...array.slice(changedIndex + 1)\n    ];\n};\n\nexport const sberLentaReducer = (state = defaultState, action: IGlobalReduxAction) => {\n    console.log('sberLentaReducer action', action, 'state', state);\n    switch (action.type) {\n        case CHANGE_CHECKBOX_DEFAULT_EXPORT_FIELDS: {\n            const { changedIndex, replacedItem }: Partial<{ changedIndex: number, replacedItem: object }> = state.requiredExportFields\n                .reduce((result, field, index) => {\n                    if (field.key === action.payload) {\n                        return {\n                            changedIndex: index,\n                            replacedItem: {\n                                ...field,\n                                isChecked: !field.isChecked\n                            }\n                        };\n                    }\n\n                    return result;\n                }, {});\n\n            const requiredExportFields = replaceArrayReduxAction(\n                state.requiredExportFields,\n                changedIndex,\n                replacedItem,\n            );\n\n            return {\n                ...state,\n                requiredExportFields,\n            };\n        }\n\n        case CHANGE_EXPORT_FORMAT_VARIANTS: {\n            const exportFormatVariants = state.exportFormatVariants.map(variant => {\n                variant.isChecked = variant.type === action.payload;\n\n                return variant;\n            });\n\n            return {\n                ...state,\n                exportFormatVariants,\n            };\n        }\n\n        case TOGGLE_MAX_PRODUCTS_RADIO_BUTTON: {\n            return {\n                ...state,\n                needLimitMaxProducts: !state.needLimitMaxProducts,\n            };\n        }\n\n        case TOGGLE_MAX_CATEGORIES_RADIO_BUTTON: {\n            return {\n                ...state,\n                needLimitMaxCategories: !state.needLimitMaxCategories,\n            };\n        }\n\n        case SET_LIMIT_MAX_CATEGORIES_NUMBER: {\n            return {\n                ...state,\n                limitMaxCategoriesNumber: action.payload,\n            };\n        }\n\n        case SET_LIMIT_MAX_PRODUCTS_NUMBER: {\n            return {\n                ...state,\n                limitMaxProductsNumber: action.payload,\n            };\n        }\n\n        case SET_LOADING: {\n            return {\n                ...state,\n                isLoading: action.payload\n            };\n        }\n\n        case TOGGLE_CACHED_DATA_RADIO_BUTTON: {\n            return {\n                ...state,\n                needToGetCachedData: !state.needToGetCachedData\n            };\n        }\n\n        default:\n            return state;\n    }\n}\n","export interface IDefaultExportField {\n    /**\n     * Выбрано ли поле\n     */\n    isChecked: boolean;\n\n    /**\n     * Название поля, выводится рядом с чекбоксом\n     */\n    name: string;\n\n    /**\n     * Уникальный ключ поля\n     */\n    key: 'name' | 'price' | 'weight' | 'image' | 'link';\n}\n\nexport interface IDefaultExportFormat {\n    /**\n     * Возможный тип\n     */\n    type: 'table' | 'file';\n\n    /**\n     * Текстовое описание типа\n     */\n    text: string;\n\n    /**\n     * Выбрано ли поле\n     */\n    isChecked: boolean;\n}\n\n/**\n * Какие поля необходимо возвращать от сервера\n */\nconst DEFAULT_EXPORT_FIELDS: IDefaultExportField[] = [\n    {\n        isChecked: true,\n        name: 'Название',\n        key: 'name'\n    },\n    {\n        isChecked: true,\n        name: 'Цена',\n        key: 'price'\n    },\n    {\n        isChecked: true,\n        name: 'Вес',\n        key: 'weight'\n    },\n    {\n        isChecked: true,\n        name: 'Изображение',\n        key: 'image'\n    },\n    {\n        isChecked: true,\n        name: 'Ссылка',\n        key: 'link'\n    }\n];\n\nconst DEFAULT_EXPORT_FORMATS: IDefaultExportFormat[] = [\n    {\n        type: 'table',\n        text: 'В таблице на сайте',\n        isChecked: true,\n    },\n    {\n        type: 'file',\n        text: 'Экспорт в файл',\n        isChecked: false,\n    }\n];\n\nexport {\n    DEFAULT_EXPORT_FIELDS, DEFAULT_EXPORT_FORMATS\n};\n","import { combineReducers } from 'redux';\n\n// import { globalReducer } from './global/reducers';\n// import { searchReducer } from './search/reducers';\nimport { sberLentaReducer } from './sbermarket/lenta';\n\nexport default combineReducers({\n    sberLenta: sberLentaReducer,\n    // global: globalReducer,\n    // search: searchReducer,\n    // alerts: alertsReducer,\n});\n\n","import React from 'react';\nimport { cn } from '@bem-react/classname';\n\nimport './Page.scss';\n\nexport const cnPage = cn('Page');\n\ninterface IPageProps {\n    className?: string;\n    children: any;\n}\n\nconst Page: React.FC<IPageProps> = props => {\n    let className = 'Page';\n\n    if (props.className) {\n        className += ' ' + props.className;\n    }\n\n    return (\n        <div className={className}>{props.children}</div>\n    )\n}\n\nexport { Page };\n","import { cn } from '@bem-react/classname';\n\nexport const cnSberLenta = cn('SberLenta');\n","import React from 'react';\n\nimport { emphasize, withStyles } from '@material-ui/core/styles';\n\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Chip from '@material-ui/core/Chip';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport { ISberLentaProps } from '../../typings';\nimport { cnSberLenta } from '../../constants';\n\nimport './SberLentaBreadcrumbs.scss';\n\nconst StyledBreadcrumb = withStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.grey[100],\n        height: theme.spacing(3),\n        color: theme.palette.grey[800],\n        fontWeight: theme.typography.fontWeightRegular,\n        '&:hover, &:focus': {\n            backgroundColor: theme.palette.grey[300],\n        },\n        '&:active': {\n            boxShadow: theme.shadows[1],\n            backgroundColor: emphasize(theme.palette.grey[300], 0.12),\n        },\n    },\n}))(Chip); // TypeScript only: need a type cast here because https://github.com/Microsoft/TypeScript/issues/26591\n\n\nconst SberLentaBreadcrumbs: React.FunctionComponent<ISberLentaProps> = props => {\n    return (\n        <Breadcrumbs className={cnSberLenta('Breadcrumbs')} separator=\"›\" aria-label=\"breadcrumb\">\n            <StyledBreadcrumb\n                label='Parsers'\n                icon={<HomeIcon fontSize='small' />}\n            />\n            <StyledBreadcrumb label='SberMarket' />\n            <StyledBreadcrumb\n                label='Lenta'\n            />\n        </Breadcrumbs>\n\n    )\n};\n\nexport { SberLentaBreadcrumbs };\n","import React from 'react';\n\nimport {\n    Checkbox,\n    Button,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    MenuItem,\n    Select,\n    FormLabel,\n    FormGroup,\n    TextField,\n    Switch,\n\n    ArrowForwardIosIcon,\n} from './components'\n\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { ISberLentaProps } from '../../typings';\n\nimport { cnSberLenta } from '../../constants';\n\nimport './SberLentaForm.scss';\n\n/**\n * Контролы выбора необходимых полей для экспорта\n */\nexport const RequiredFieldsFormControl: React.FunctionComponent<ISberLentaProps> = props => {\n    const {\n        changeCheckboxDefaultExportFields: onChange,\n        requiredExportFields: controls,\n    } = props;\n\n    if (!controls || !onChange) return null;\n\n    const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name } = event.target;\n\n        onChange(name);\n    };\n\n    return (\n        <FormControl>\n            <FormLabel className={cnSberLenta('FormLabel')}>Необходимые поля</FormLabel>\n            <FormGroup>\n                {controls.map(({ name, key, isChecked }) => {\n                    return (\n                        <FormControlLabel\n                            className={cnSberLenta('FormCheckbox')}\n                            key={name}\n                            control={<Checkbox checked={isChecked} onChange={onChangeHandler} name={key} />}\n                            label={name}\n                        />\n                    );\n                })}\n            </FormGroup>\n        </FormControl>\n    );\n};\n\n/**\n * Контролы выбора формата экспорта данных\n */\nexport const ExportFormatsFormControl: React.FunctionComponent<ISberLentaProps> = props => {\n    const {\n        exportFormatVariants: formats,\n        changeExportFormatVariants: onChange,\n    } = props;\n\n    if (!formats) return null;\n\n    const selectedFormat = formats.find(format => format.isChecked);\n\n    if (!selectedFormat) return null;\n\n    const handleExportFormat = (event: React.ChangeEvent<any>) => {\n        onChange(event.target.value);\n    }\n\n    return (\n        <FormControl className={cnSberLenta('FormControl')}>\n            <InputLabel id='export-format-control-label'>Формат выходных данных</InputLabel>\n            <Select\n                className={cnSberLenta('ExportFormatSelect') + ' ' + cnSberLenta('FormFixedControl')}\n                labelId='export-format-control-label'\n                id='export-format-control-label'\n                value={selectedFormat.type}\n                onChange={handleExportFormat}\n            >\n                {formats.map(format => {\n                    return (\n                        <MenuItem key={format.type} value={format.type}>{format.text}</MenuItem>\n                    );\n                })}\n            </Select>\n        </FormControl>\n    );\n};\n\n/**\n * Контрол ограничения максимального количества категорий\n */\nexport const MaxCategoriesFormControl: React.FunctionComponent<ISberLentaProps> = props => {\n    const {\n        needLimitMaxCategories, toggleMaxCategoriesRadioButton,\n        limitMaxCategoriesNumber, setLimitMaxCategoriesNumber,\n    } = props;\n\n    const onChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setLimitMaxCategoriesNumber(Number(event.target.value));\n    }\n\n    return (\n        <FormControl className={cnSberLenta('FormControl')}>\n            <FormLabel className={cnSberLenta('FormLabel')}>Ограничить максимальное количество категорий</FormLabel>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={needLimitMaxCategories}\n                            onChange={() => toggleMaxCategoriesRadioButton()}\n                            name='max-categories-form-control'\n                            color='primary'\n                        />\n                    }\n                    label=''\n                />\n            </FormGroup>\n            {needLimitMaxCategories && <TextField\n                className={cnSberLenta('FormFixedControl')}\n                id='max-results-limit'\n                label='Максимум категорий'\n                type='number'\n                onChange={onChange}\n                value={limitMaxCategoriesNumber}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n            />\n            }\n        </FormControl>\n    );\n};\n\n/**\n * Контрол ограничения максимального количества продуктов\n */\nexport const MaxProductsFormControl: React.FunctionComponent<ISberLentaProps> = props => {\n    const {\n        needLimitMaxProducts, toggleMaxProductsRadioButton,\n        limitMaxProductsNumber, setLimitMaxProductsNumber,\n    } = props;\n\n    const onChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setLimitMaxProductsNumber(Number(event.target.value));\n    }\n\n    return (\n        <FormControl className={cnSberLenta('FormControl')}>\n            <FormLabel className={cnSberLenta('FormLabel')}>Ограничить максимальное количество продуктов</FormLabel>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={needLimitMaxProducts}\n                            onChange={() => toggleMaxProductsRadioButton()}\n                            name='max-products-form-control'\n                            color='primary'\n                        />\n                    }\n                    label=''\n                />\n            </FormGroup>\n            {\n                needLimitMaxProducts && <TextField\n                    className={cnSberLenta('FormFixedControl')}\n                    id='max-products-limit'\n                    label='Максимум продуктов'\n                    type='number'\n                    onChange={onChange}\n                    value={limitMaxProductsNumber}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n            }\n        </FormControl>\n    );\n};\n\n/**\n * Контрол получения информации из cache\n */\nexport const GetFromCacheFormControl: React.FunctionComponent<ISberLentaProps> = props => {\n    const {\n        needToGetCachedData,\n        toggleCachedDataRadioButton,\n    } = props;\n\n    const tooltipText = 'Если информация была обработана ранее - взять её. Это ускоряет получение результатов и уменьшает нагрузку на сервер.'\n\n    return (\n        <FormControl className={cnSberLenta('FormControl')}>\n            <FormLabel className={cnSberLenta('FormLabel')}>Взять информацию из кэша\n                <Tooltip title={tooltipText}>\n                    <IconButton className={cnSberLenta('FormQuestionTooltipIconButton')} size='small' aria-label={tooltipText}>\n                        <HelpOutlineIcon className={cnSberLenta('FormQuestionTooltipIcon')} />\n                    </IconButton>\n                </Tooltip>\n            </FormLabel>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={needToGetCachedData}\n                            onChange={() => toggleCachedDataRadioButton()}\n                            name='max-products-form-control'\n                            color='primary'\n                        />\n                    }\n                    label=''\n                />\n            </FormGroup>\n        </FormControl>\n    );\n}\n\n/**\n * Кнопка начала парсинга данных\n */\nexport const StartFormParseButton: React.FunctionComponent<ISberLentaProps> = props => {\n    const { isLoading, setLoading } = props;\n\n    const onStartButtonClick = () => {\n        setLoading(true);\n\n        setTimeout(() => {\n            setLoading(false);\n        }, 3000);\n    };\n\n    return (\n        <Button\n            className={cnSberLenta('FormParseButton')}\n            disabled={isLoading}\n            onClick={onStartButtonClick}\n            variant='contained'\n            color='primary'\n            endIcon={<ArrowForwardIosIcon />}\n        >\n            Старт\n        </Button>\n    )\n};\n\nconst SberLentaForm: React.FunctionComponent<ISberLentaProps> = props => {\n    return (\n        <form className={cnSberLenta('Form')} noValidate autoComplete='off'>\n            <RequiredFieldsFormControl\n                {...props}\n            />\n            <ExportFormatsFormControl\n                {...props}\n            />\n            <MaxCategoriesFormControl\n                {...props}\n            />\n\n            <MaxProductsFormControl\n                {...props}\n            />\n\n            <GetFromCacheFormControl\n                {...props}\n            />\n\n            <StartFormParseButton\n                {...props}\n            />\n        </form>\n    );\n};\n\nexport { SberLentaForm };\n","/*eslint-disable */\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { Page, cnPage } from '../../../components/Page/Page';\n\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\n// import { AutoSizer, Column, Table } from 'react-virtualized';\n\nimport { ISberLentaProps } from './typings';\n\nimport { cnSberLenta } from './constants';\n\nimport { SberLentaBreadcrumbs, SberLentaForm } from './components/';\n\nimport './index.scss';\n\nimport './sberlenta.scss';\n\nconst SberLentaPage: React.FC<ISberLentaProps> = props => {\n    const { isLoading } = props;\n    const [exportFormat, toggleExportFormat] = React.useState('table');\n    const [isLimitedResultsCount, setLimitResultsCount] = React.useState(false);\n    const [maxResultLimitCountValue, handleMaxResultLimitCountValue] = React.useState(50);\n    const [tableResults, setTableResults] = React.useState(null);\n    const [alert, saveAlert] = React.useState(null);\n\n    const onStartButtonClick = () => {\n        console.log('start button click');\n\n        const host = window.location.hostname === 'localhost' ?\n            'http://localhost:3001' : 'https://tools-parser-api-backend.herokuapp.com';\n\n        const url = host + '/api/parser';\n\n        const body = JSON.stringify({\n            source: 'sbermarket',\n            categories: 'all',\n            fields: ['cost', 'weight', 'name']\n        });\n\n        const request = fetch(url, {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body\n        });\n\n        const isFile = false;\n\n        if (isFile) {\n            request\n                .then(response => response.blob())\n                .then(blob => {\n                    var url = window.URL.createObjectURL(blob);\n                    var a = document.createElement('a');\n                    a.href = url;\n                    a.download = 'filename.xlsx';\n                    document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\n                    a.click();\n                    a.remove();  //afterwards we remove the element again\n                });\n        } else {\n            request\n                .then(response => response.json())\n                .then(json => {\n                    console.log(json);\n\n                    if (json.success) {\n                        setTableResults(json.response);\n\n                        // localStorage.setItem('results', JSON.stringify(json.response));\n                    }\n\n                    if (json.error) {\n                        // saveAlert({\n                        //     // type: 'error',\n                        //     title: json.errorText,\n                        //     code: json.errorCode\n                        // });\n                    }\n                });\n        }\n\n    };\n\n    const handleExportFormat = (event: any) => {\n        toggleExportFormat(event.target.value);\n    };\n\n    const handleChangeRequiredFields = ({ target }: any) => {\n        const { name } = target;\n\n        // const changedField = requiredFields[name];\n        // changedField.isChecked = !changedField.isChecked;\n\n        // setRequiredFields({\n        //     ...requiredFields,\n        //     [name]: changedField\n        // });\n    };\n\n    const StyledTableCell = withStyles((theme) => ({\n        head: {\n            backgroundColor: theme.palette.common.black,\n            color: theme.palette.common.white,\n        },\n        body: {\n            fontSize: 14,\n        },\n    }))(TableCell);\n\n    const StyledTableRow = withStyles((theme) => ({\n        root: {\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.action.hover,\n            },\n        },\n    }))(TableRow);\n\n    const [showScroll, setShowScroll] = React.useState(false)\n\n    const checkScrollTop = () => {\n        if (!showScroll && window.pageYOffset > 400) {\n            setShowScroll(true)\n        } else if (showScroll && window.pageYOffset <= 400) {\n            setShowScroll(false)\n        }\n    };\n\n    const scrollTop = () => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    };\n\n    // window.addEventListener('scroll', checkScrollTop)\n\n    return (\n        <Page className={cnSberLenta()}>\n            <SberLentaBreadcrumbs {...props} />\n\n            <Typography paragraph>\n                Парсер ассортимента \"Лента\" Сбермаркет <Link\n                    className={cnSberLenta('SourceLink')}\n                    target='_blank'\n                    href='https://sbermarket.ru/lenta'\n                    title='Открыть в новой вкладке'\n                >(sbermarket.ru/lenta)</Link> позволяет получать информацию о товарах из всех категорий, представленных на сайте.\n            </Typography>\n            <Typography className={cnPage('TextOption')}>Дополнительные параметры.</Typography>\n\n            <SberLentaForm {...props} />\n\n            {isLoading && <LinearProgress className={cnSberLenta('Progress')} />}\n\n            {\n                tableResults && <div className={cnPage('ResultsTable')}>\n                    <TableContainer component={Paper}>\n                        <Table size='small' aria-label='Результаты парсинга'>\n                            <TableHead>\n                                <TableRow>\n                                    <StyledTableCell>#</StyledTableCell>\n                                    <StyledTableCell>Название</StyledTableCell>\n                                    <StyledTableCell>Цена</StyledTableCell>\n                                    <StyledTableCell style={{ minWidth: '90px' }}>Вес</StyledTableCell>\n                                    <StyledTableCell>Изображение</StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {/* {tableResults.map((category, categoryIndex) => {\n                                const { categoryName, categoryLink, productItems } = category;\n\n                                const productItemsCount = productItems.length;\n\n                                return productItems.map((product, productIndex) => {\n                                    let price;\n\n                                     // original - цена до скидки (перечеркнутая)\n                                     // default - цена после скидки (актуальная), либо если скидки нет\n\n                                    if (product.price) {\n                                        if (product.price.default && product.price.original) {\n                                            price = (\n                                                <React.Fragment>\n                                                    <span className={cnPage('ProductItemPriceOriginal', {\n                                                        crossed: true\n                                                    })}>{product.price.original}</span>\n                                                    <span className={cnPage('ProductItemPriceDefault')}>{product.price.default}</span>\n                                                </React.Fragment>\n                                            )\n                                        } else if (product.price.default) {\n                                            price = (\n                                                <span className={cnPage('ProductItemPriceOriginal')}>{product.price.default}</span>\n                                            );\n                                        }\n                                    }\n\n                                    return (\n                                        <React.Fragment key={product.title + productIndex}>\n                                            {productIndex === 0 && (\n                                                <StyledTableRow className={cnPage('ProductItemCategory')}>\n                                                    <StyledTableCell style={{ verticalAlign: 'top' }} component='th' scope='row'>{categoryIndex + 1}</StyledTableCell>\n                                                    <StyledTableCell style={{ verticalAlign: 'top' }} colSpan={7}>\n                                                        <Link className={cnPage('ProductItemCategoryLink')} href={categoryLink} target='_blank' title='Открыть в новой вкладке'>\n                                                            {categoryName} &#8226; {productItemsCount} шт.\n                                                        </Link>\n                                                    </StyledTableCell>\n                                                    // <StyledTableCell style={{ verticalAlign: 'top' }}>{productItemsCount}</StyledTableCell>\n                                                </StyledTableRow>\n                                            )}\n                                            <StyledTableRow>\n                                                <StyledTableCell>{categoryIndex + 1}.{productIndex + 1}</StyledTableCell>\n                                                <StyledTableCell>\n                                                    {//Link or just a product name //}\n                                                    {true ? (\n                                                        <Link title='Открыть в новой вкладке' href={product.link} target='_blank'>{product.title}</Link>\n                                                    ) : product.title}\n                                                </StyledTableCell>\n                                                <StyledTableCell className={cnPage('ProductItemPrice')}>{price}</StyledTableCell>\n                                                <StyledTableCell>{product.weight}</StyledTableCell>\n                                                <StyledTableCell>\n                                                    <LazyLoadImage\n                                                        className={cnPage('ProductItemImage')}\n                                                        alt='Изображение товара'\n                                                        src={product.image}\n                                                    />\n                                                </StyledTableCell>\n                                            </StyledTableRow>\n                                        </React.Fragment>\n                                    )\n                                })\n                            })} */}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </div>\n            }\n\n            {\n                alert && <div className='alerts'>\n                    {/* <Alert className='alert' onClose={() => saveAlert(null)} severity={alert.type}>\n                        <AlertTitle>{alert.title}</AlertTitle>\n                        {alert.code && <strong>Код ошибки - {alert.code}</strong>}\n                    </Alert> */}\n                </div>\n            }\n        </Page >\n    );\n}\n\nexport { SberLentaPage };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { SberLentaPage as SberLentaPagePageComponent } from './';\n\nimport { ISberLentaVars, ISberLentaMethods } from '../../../store/sbermarket/lenta';\n\nimport { ISberLentaProps } from './typings';\n\nimport {\n    actions\n} from '../../../store/sbermarket/lenta/actions';\n\nconst {\n    changeCheckboxDefaultExportFields,\n    changeExportFormatVariants,\n\n    toggleMaxCategoriesRadioButton,\n    toggleMaxProductsRadioButton,\n\n    setLimitMaxCategoriesNumber,\n    setLimitMaxProductsNumber,\n\n    setLoading,\n    toggleCachedDataRadioButton,\n} = actions;\n\nconst SberLentaPageBase: React.FunctionComponent<ISberLentaProps> = props => {\n    return (\n        <SberLentaPagePageComponent {...props} />\n    );\n}\n\nconst mapStateToProps = (state: any): ISberLentaVars => {\n    return {\n        isLoading: state.sberLenta.isLoading,\n        needToGetCachedData: state.sberLenta.needToGetCachedData,\n\n        needLimitMaxCategories: state.sberLenta.needLimitMaxCategories,\n        needLimitMaxProducts: state.sberLenta.needLimitMaxProducts,\n\n        requiredExportFields: state.sberLenta.requiredExportFields,\n        exportFormatVariants: state.sberLenta.exportFormatVariants,\n\n        limitMaxCategoriesNumber: state.sberLenta.limitMaxCategoriesNumber,\n        limitMaxProductsNumber: state.sberLenta.limitMaxProductsNumber,\n    };\n}\n\nconst mapDispatchToProps: ISberLentaMethods = {\n    changeCheckboxDefaultExportFields,\n    changeExportFormatVariants,\n\n    toggleMaxCategoriesRadioButton,\n    toggleMaxProductsRadioButton,\n\n    setLimitMaxCategoriesNumber,\n    setLimitMaxProductsNumber,\n\n    setLoading,\n    toggleCachedDataRadioButton,\n};\n\nconst SberLentaPage = connect(mapStateToProps, mapDispatchToProps)(SberLentaPageBase);\n\nexport { SberLentaPage };\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../../store/reducers';\n\nimport { SberLentaPage } from '../../pages/sbermarket/lenta/page';\n\nimport './App.scss';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <div className='App'>\n                <SberLentaPage />\n            </div>\n        </Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}